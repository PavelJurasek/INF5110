package oblig1parser;
import java_cup.runtime.*;
import syntaxtree.*;
import syntaxtree.decl.*;
import syntaxtree.expr.*;
import syntaxtree.stmt.*;
import java.util.*;

parser code {:

:};
/* Keywords*/
terminal                        PROGRAM;
terminal                        CLASS;
terminal                        BEGIN;
terminal                        END;
terminal                        VAR;
terminal                        PROCEDURE;
terminal                        RETURN;
terminal                        REF;
terminal                        DEREF;
terminal                        IF, THEN, ELSE;
terminal                        WHILE, DO;
terminal                        NOT;
terminal                        NEW;

/* Constants */
terminal Boolean                BOOL;
terminal                        NULL;

/* Types */
terminal                        TYPE_BOOL;
terminal                        TYPE_INT;
terminal                        TYPE_STRING;
terminal                        TYPE_FLOAT;
terminal String                 ID;

/* Symbols */
terminal                        LPAR, RPAR;
terminal                        SEMI;
terminal                        COLON;
terminal                        DOT;
terminal                        COMMA;
terminal                        ASSIGN;
terminal                        LOG_AND;
terminal                        LOG_OR;
terminal                        REL_LT, REL_LTE, REL_GT, REL_GTE, REL_EQ, REL_NEQ;
terminal                        ARIT_PLUS, ARIT_MINUS, ARIT_MUL, ARIT_DIV, ARIT_POW;


/* Identifiers */


/* Literals */
terminal Float                  FLOAT_LITERAL;
terminal String                 STRING_LITERAL;
terminal Integer                INT_LITERAL;


/* Nonterminals */
/* Misc */
non terminal Program            program;
non terminal Type               type;


/* Declarations */
non terminal Decl               decl;
non terminal VarDecl            var_decl;
non terminal DerefVarExpr       deref_var;
non terminal RefExpr            ref_var;
non terminal ProcDecl           proc_decl;
non terminal ClassDecl          class_decl;
non terminal ParamDecl          param_decl;
non terminal List<Decl>         decl_list, opt_decl_list;
non terminal List<VarDecl>      var_list;
non terminal List<ParamDecl>    param_list;

/* Expressions */
non terminal Expr               expr;
non terminal VarExpr            var;
non terminal List<Expr>         expr_list;
non terminal List<Expr>         opt_expr_list;
non terminal BinaryExpr         binary_expr, expr1, expr2, expr3, /*expr4,*/ expr5, expr6, expr8, expr9, rel_op, add_sub, mul_div;
non terminal UnaryExpr          unary_expr;

/* here's the problem
non terminal RelOp              rel_op;
non terminal AritOp             add_sub, mul_div;

/* Statements */
non terminal Stmt               stmt;
non terminal IfStmt             if_stmt;
non terminal List<Stmt>         else_stmt;
non terminal WhileStmt          while_stmt;
non terminal ReturnStmt         return_stmt;
non terminal CallStmt           call_stmt;
non terminal AssignStmt         assign_stmt;
non terminal List<Stmt>         stmt_list, opt_stmt_list;

/* Literals */
non terminal LiteralExpr        literal;
//non terminal BoolLiteral        bool_literal;
//non terminal FloatLiteral       float_literal;
//non terminal IntLiteral         int_literal;
//non terminal NullLiteral        null_literal;
//non terminal StringLiteral      string_literal;

/* The grammar */
start with program;

program         ::= PROGRAM ID:name BEGIN decl_list:dl END SEMI
                    {: RESULT = new Program(name, dl); :};

/* Declarations */
opt_decl_list   ::= decl_list:l {: RESULT = l; :}
                |   {: RESULT = new LinkedList<Decl>(); :};

decl_list       ::= decl:d SEMI {: List<Decl> l = new LinkedList<Decl>(); l.add(d); RESULT = l; :}
                |   decl_list:dl decl:d SEMI {: dl.add(d); RESULT = dl; :};

decl            ::= class_decl:sd {: RESULT = sd; :}
                |   var_decl:vd {: RESULT = vd; :}
                |   proc_decl:pd {: RESULT = pd; :};

class_decl      ::= CLASS ID:name BEGIN var_list:vl END
                    {: RESULT = new ClassDecl(name, vl); :}
                |   CLASS ID:name BEGIN END
                    {: RESULT = new ClassDecl(name); :};

var_list        ::= var_decl:v SEMI {: List<VarDecl> l = new LinkedList<VarDecl>(); l.add(v); RESULT = l; :}
                |   var_list:l var_decl:v SEMI {: l.add(v); RESULT = l; :};

var_decl        ::= VAR ID:name COLON type:t {: RESULT = new VarDecl(name, t); :};

proc_decl       ::= PROCEDURE ID:name LPAR param_list:pl RPAR COLON type:t BEGIN opt_decl_list:dl opt_stmt_list:sl END
                    {: RESULT = new ProcDecl(name, pl, dl, sl, t); :}
                | PROCEDURE ID:name LPAR param_list:pl RPAR BEGIN opt_decl_list:dl opt_stmt_list:sl END
                    {: RESULT = new ProcDecl(name, pl, dl, sl); :};

param_list      ::= param_decl:d {: List<ParamDecl> l = new LinkedList<ParamDecl>(); l.add(d); RESULT = l; :}
                |   param_list:pl COMMA param_decl:d {: pl.add(d); RESULT = pl; :}
                |   {: RESULT = new LinkedList<ParamDecl>(); :};

param_decl      ::= ID:name COLON type:t {: RESULT = new ParamDecl(name, t); :};

/* Statements */
stmt            ::= assign_stmt:as {: RESULT = as; :}
                |   if_stmt:is {: RESULT = is; :}
                |   while_stmt:ws {: RESULT = ws; :}
                |   return_stmt:rs {: RESULT = rs; :}
                |   call_stmt:cs {: RESULT = cs; :};

opt_stmt_list   ::= stmt_list:sl {: RESULT = sl; :}
                |   {: RESULT = new LinkedList<Stmt>(); :};

stmt_list       ::= stmt:s SEMI {: List<Stmt> l = new LinkedList<Stmt>(); l.add(s); RESULT = l; :}
                |   stmt_list:sl stmt:s SEMI {: sl.add(s); RESULT = sl; :};

assign_stmt     ::= var:v ASSIGN expr:e {: RESULT = new AssignStmt(v, e); :};


if_stmt         ::= IF expr:e THEN BEGIN opt_stmt_list:il END else_stmt:el
                    {: RESULT = new IfStmt(e, il, el); :};

else_stmt       ::= ELSE BEGIN opt_stmt_list:el END {: RESULT = el; :}
                |   {: RESULT = new LinkedList<Stmt>(); :};


while_stmt      ::= WHILE expr:e DO BEGIN opt_stmt_list:s END {: RESULT = new WhileStmt(e, s); :};

return_stmt     ::= RETURN expr:e {: RESULT = new ReturnStmt(e); :}
                |   RETURN {: RESULT = new ReturnStmt(); :};

call_stmt       ::= ID:name LPAR opt_expr_list:exprs RPAR {: RESULT = new CallStmt(name, exprs); :};

/* Types */
type            ::= TYPE_FLOAT {: RESULT = new Type("float"); :}
                |   TYPE_INT {: RESULT = new Type("int"); :}
                |   TYPE_STRING {: RESULT = new Type("string"); :}
                |   TYPE_BOOL {: RESULT = new Type("bool"); :};

/* Expressions */
expr            ::= binary_expr:e {: RESULT = e; :}
                |   unary_expr:e {: RESULT = e; :};

binary_expr     ::= rel_op: e {: RESULT = e; :}
                |   add_sub: e {: RESULT = e; :}
				|	mul_div: e {: RESULT = e; :};

unary_expr      ::= var:v {: RESULT = v; :}
                |   literal: l {: RESULT = l; :}
                |   NEW ID:name {: RESULT = new NewExpr(new Type(name)); :}
                |   ref_var:rv {: RESULT = rv; :}
                |   deref_var:dv {: RESULT = dv; :}
                |   LPAR expr1:e RPAR {: RESULT = new ParenthesesExpr(e); :};

expr1		::= expr1: e1 LOG_OR expr2:e2 {: RESULT = new LogOpExpr(e1, "||", e2); :}
		|	expr2: e {:	RESULT=e; :};

expr2		::= expr2:e1 LOG_AND expr3:e2 {: RESULT = new LogOpExpr(e1, "&&", e2); :}
		|	expr3: e {:	RESULT=e; :};

/* not expr can't be here*/
/*expr3		::= NOT expr3:e {: RESULT = new NotExpr(e); :}
		|	expr4:e {: RESULT=e :};*/

expr3		::= expr5:e1 rel_op: op expr5:e2 {: RESULT= new BinaryExpr(e1, op, e2); :}
		|	expr5: e {: RESULT=e :};

expr5		::= expr5:e1 add_sub: op expr6:e2 {: RESULT= new BinaryExpr(e1, op, e2); :}
		|	expr6: e {: RESULT=e :};

expr6		::= expr6:e1 mul_div: op expr8:e2 {: RESULT= new BinaryExpr(e1, op, e2); :}
		|	expr8: e {: RESULT=e :};

expr8		::= expr8:e1 ARIT_POW expr9:e2 {: RESULT= new BinaryExpr(e1, "#", e2); :}
		|	expr9: e {: RESULT=e :};

var             ::= ID:name {: RESULT = new VarExpr(name); :}
                |   expr9:e DOT ID:name {: RESULT = new VarExpr(name, e); :};

add_sub    	::= ARIT_PLUS
                |   ARIT_MINUS;

mul_div		::= ARIT_MUL
                |   ARIT_DIV;

rel_op		::= REL_EQ
                |   REL_NEQ
                |   REL_GT
                |   REL_GTE
                |   REL_LT
                |   REL_LTE;

expr_list       ::= expr:e {: List<Expr> el = new LinkedList<Expr>(); el.add(e); RESULT = el; :}
                |   expr_list:el COMMA expr:e {: el.add(e); RESULT = el; :};

opt_expr_list   ::= expr_list:el {: RESULT = el; :}
                |   {: RESULT = new LinkedList<Expr>(); :};

ref_var         ::= REF LPAR var:v RPAR {: RESULT = new RefExpr(v); :};

deref_var       ::= DEREF LPAR var:v RPAR {: RESULT = new DerefVarExpr(v); :}
                |   DEREF LPAR deref_var:dv RPAR {: RESULT = dv; :};

/* Literals */
literal         ::= FLOAT_LITERAL:f {: RESULT = new FloatLiteral(f); :}
                |   INT_LITERAL:i {: RESULT = new IntLiteral(i); :}
                |   STRING_LITERAL:s {: RESULT = new StringLiteral(s); :}
                |   BOOL:b {: RESULT = new BoolLiteral(b); :}
                |   NULL {: RESULT = new NullLiteral(); :};
