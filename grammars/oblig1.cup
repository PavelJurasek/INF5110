package oblig1parser;
import java_cup.runtime.*;
import syntaxtree.*;
import syntaxtree.decl.*;
import java.util.*;

parser code {:

:};

/* Terminals */
terminal            PROGRAM;
terminal						CLASS;
terminal						NEW;
terminal            BEGIN;
terminal						END;
terminal            IF;
terminal						THEN;
terminal						ELSE;
terminal            WHILE;
terminal						DO;
terminal            PROCEDURE;
terminal            VAR;
terminal            REF;
terminal						DEREF;
terminal						TRUE;
terminal						FALSE;
terminal            NULL;



/*symbols*/
terminal            LPAR;
terminal						RPAR;
terminal            DOT;
terminal						COMMA;
terminal            SEMI;
terminal						COLON;
terminal						RETURN;

/*operators/*
terminal Boolean    BOOL;
terminal						EQUAL;
terminal            LOG_AND;
terminal						LOG_OR;
terminal						NOT;
terminal            REL_LT, REL_LTE, REL_GT, REL_GTE, REL_EQ, REL_NEQ;
terminal            ARIT_PLUS, ARIT_MINUS, ARIT_MUL, ARIT_DIV, ARIT_POW;

terminal            TYPE_FLOAT, TYPE_INT, TYPE_STRING, TYPE_BOOL;
terminal            ASSIGN;

terminal String     ID;

/*literals*/
terminal String     STRING_LITERAL;
terminal Integer    INT_LITERAL;
terminal Float      FLOAT_LITERAL;

/* Precedences */
precedence left AND;
precedence left OR;
precedence left	TIMES;
precedence left ASTERISK;
precedence left SLASH;
precedence left MODULUS;
precedence left NOT;
precedence left LESS_THAN, LESS_THAN_EQUAL, GREATER_THAN, GREATER_THAN_EQUAL;
precedence right EQUALS, PLUS_EQUALS, MINUS_EQUALS
precedence left PLUS, MINUS;

/* Non terminals */
non terminal Program            	program;

non terminal Decl               	decl;
non terminal List<Decl>         	decl_list;

non terminal Variable					    var;
non terminal VarDecl            	var_decl;
non terminal List<VarDecl>      	var_list;

non terminal ClassDecl          	class_decl;
non terminal ProcedureDecl				proc_decl;

non terminal Type               	type;

non terminal Parameter					  param;
non terminal ParameterDecl				param_decl;
non terminal List<Parameter>			param_list

non terminal Statement					  stmt;
non terminal AssignmentStatement	assign_stmt;
non terminal WhileStatement				while_stmt;
non terminal IfStatement				  if_stmt;

non terminal ArithmeticOpExpression		arit_op_exp;
non terminal RelationalOpExpression		rel_op_exp;



/* The grammar */
program         ::= PROGRAM ID:name BEGIN decl_list:dl END SEMI
                        {: RESULT = new Program(name, dl); :} 
                  ;

decl_list       ::= decl:d SEMI {: List<Decl> l = new LinkedList<Decl>(); l.add(d); RESULT = l; :}
                |   decl_list:dl decl:d SEMI {: dl.add(d); RESULT = dl; :};

decl            ::= class_decl:sd {: RESULT = sd; :}
                |   var_decl:vd {: RESULT = vd; :}
                                  ;
                                  
class_decl      ::= CLASS ID:name BEGIN var_list:vl END
                        {: RESULT = new ClassDecl(name, vl); :}
                | CLASS ID:name BEGIN END
                        {: RESULT = new ClassDecl(name); :};

var_list        ::= var_decl:v SEMI {: List<VarDecl> l = new LinkedList<VarDecl>(); l.add(v); RESULT = l; :}
                | var_list:l var_decl:v SEMI {: l.add(v); RESULT = l; :};

var_decl        ::= VAR ID:name COLON type:t {: RESULT = new VarDecl(name, t); :};

type            ::= TYPE_FLOAT {: RESULT = new Type("float"); :} | TYPE_INT {: RESULT = new Type("int"); :} | TYPE_STRING {: RESULT = new Type("string"); :} | TYPE_BOOL {: RESULT = new Type("bool"); :};


